use alloc::boxed::Box;
use alloc::collections::BTreeMap;
use alloc::format;
use alloc::string::String;
use alloc::vec::Vec;

use crate::buffer::ReadBuffer;
use crate::record::Value;
use crate::utils::error::EtError;

/// Readers for formats generated by the GC/LC control software Chemstation
pub mod chemstation;
/// Reader for FASTA bioinformatics format
pub mod fasta;
/// Reader for FASTQ bioinformatics format
pub mod fastq;
/// Reader for flow data
pub mod flow;
/// Reader for FASTA/FASTQ formats that parse into "kmers"
pub mod kmers;
/// Reader for BAM/SAM bioinformatics formats
pub mod sam;
/// Readers for Thermo mass spectral isotopic formats
pub mod thermo_iso;
/// Readers for tab-seperated text format
pub mod tsv;

/// Turn `rb` into a Reader of type `parser_type`
pub fn get_reader<'r>(
    parser_type: &str,
    rb: ReadBuffer<'r>,
) -> Result<Box<dyn RecordReader + 'r>, EtError> {
    Ok(match parser_type {
        "bam" => Box::new(sam::BamReader::new(rb, ())?),
        "chemstation_fid" => Box::new(chemstation::ChemstationFidReader::new(rb, ())?),
        "chemstation_ms" => Box::new(chemstation::ChemstationMsReader::new(rb, ())?),
        "chemstation_mwd" => Box::new(chemstation::ChemstationMwdReader::new(rb, ())?),
        "chemstation_uv" => Box::new(chemstation::ChemstationUvReader::new(rb, ())?),
        "fasta" => Box::new(fasta::FastaReader::new(rb, ())?),
        "fastq" => Box::new(fastq::FastqReader::new(rb, ())?),
        "fcs" => Box::new(flow::FcsReader::new(rb, ())?),
        "sam" => Box::new(sam::SamReader::new(rb, ())?),
        "thermo_cf" => Box::new(thermo_iso::ThermoCfReader::new(rb, ())?),
        "thermo_dxf" => Box::new(thermo_iso::ThermoDxfReader::new(rb, ())?),
        "tsv" => Box::new(tsv::TsvReader::new(rb, (b'\t', b'"'))?),
        _ => {
            return Err(EtError::new(format!(
                "No parser available for the filetype {}",
                parser_type
            )))
        }
    })
}

/// The trait that maps over "generic" RecordReaders
///
/// Structs that implement this trait should also implement a `new` method that
/// takes a ReadBuffer and a "state" for creation and a `next` method that
/// returns a "specialized" struct that can be turned into the "generic" struct
/// via the `next_record` method.
pub trait RecordReader: ::core::fmt::Debug {
    /// Returns the next record from the file.
    ///
    /// Roughly equivalent to Rust's `Iterator.next`, but obeys slightly
    /// looser lifetime requirements to allow zero-copy parsing.
    fn next_record(&mut self) -> Result<Option<Vec<Value>>, EtError>;

    /// The header titles that correspond to every item in the record
    fn headers(&self) -> Vec<String>;

    /// Extra metadata about the file or data in the file
    fn metadata(&self) -> BTreeMap<String, Value>;
}

/// Generates a `...Reader` struct for the associated state-based file parsers
/// along with the matching `RecordReader` for that struct.
#[macro_export]
macro_rules! impl_reader {
    ($(#[$attr:meta])* $reader: ident, $record:ty, $state:ty, $new_params:ty) => {
        $(#[$attr])*
        /// [this reader was autogenerated via macro]
        #[derive(Debug)]
        pub struct $reader<'r> {
            rb: ReadBuffer<'r>,
            state: $state,
        }

        impl<'r> $reader<'r> {
            /// Create a new instance of the reader
            pub fn new(mut rb: ReadBuffer<'r>, params: $new_params) -> Result<Self, EtError> {
                let state = rb.extract(params)?;
                Ok($reader { rb, state })
            }

            /// Return the specialized version of this record.
            ///
            /// To get the "generic" version, please use the `next_record`
            /// method from the `RecordReader` trait.
            #[allow(clippy::should_implement_trait)]
            pub fn next(&mut self) -> Result<Option<$record>, EtError> {
                self.rb.record_pos += 1;
                self.rb.extract(&mut self.state)
            }
        }

        impl<'r> $crate::readers::RecordReader for $reader<'r> {
            /// The next record, expressed as a `Vec` of `Value`s.
            fn next_record(
                &mut self,
            ) -> Result<Option<::alloc::vec::Vec<$crate::record::Value>>, EtError> {
                if let Some(record) = self.rb.extract::<Option<$record>>(&mut self.state)? {
                    Ok(Some(record.into()))
                } else {
                    Ok(None)
                }
            }

            /// The headers for this Reader.
            fn headers(&self) -> ::alloc::vec::Vec<::alloc::string::String> {
                use $crate::record::RecordHeader;
                <$record>::header()
            }

            /// The metadata for this Reader.
            fn metadata(&self) -> ::alloc::collections::BTreeMap<::alloc::string::String, $crate::record::Value> {
                self.state.metadata()
            }
        }
    };
}
